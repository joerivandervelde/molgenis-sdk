<molgenis name="org.molgenis.omx">
	<module name="values" label="Values module">
		<description>
			Advanced value types for core
		</description>
		
		<entity name="Category" extends="Target">
			<description>
			Use Name as the label (e.g. 'male', 'female') and ValueCode as the corresponding code (e.g. '1', '2')
			</description>
			<field name="ValueCode" type="string" description="The value used to store this category in ObservedValue. For example '1', '2'." />			
		</entity>

		<entity name="PermittedValue" implements="AutoId">
			<description>
			
				TODO: REMOVE ??
			
				Specification of what type of value are acceptable when adding an Value for the Method this PermittedValue refers to. This includes more precise constraints such as the allowed range of numerical data, choosable options for categorical data, or regular expression validation for textual data. For categorical data, multiple PermittedValue records each containing a single string value refers to a Method. For XREF data, the entity type which is the most specific root should be specified. For example: specifying org.molgenis.omx.Individual allows for XREFs to all Individuals, plus all subclasses of this type.

				Multiple PermittedValues can be attached to a Feature. This means you can allow complex permitted values such as ["yes", "no", 1, 0], using two PermittedValues, one for String and one for Integer, each holding two options - or four separate PermittedValues for each option.
				
				PermittedValues are by design not 'reusable' via an MREF, because they act both as validators and provenance. Changing the options afterwards is bad practice, but at least will affect at most only a single Feature.
				
				TODO: REMOVE ??

			</description>
			
			<field name="Description" description="Clarification of this option." />

			<field name="Feature" type="xref" xref_entity="Feature"
				description="The method these permitted values are part of." />

			<field name="AllowedValue" type="string" nillable="false"
				description="The constraint rule that is applied when entering a value for a method to which this permittedvalue belong. Eg: 'm' or 'f' for categorical codes, '0..10' for an integer range, 'Individual' for an XREF value class." />
			<field name="ValueLabel" type="string" nillable="true"
				description="The label for the contraint. Eg. in case of categorical values: 'Male' for code 'm' or 'Female' for code 'f'. For an integer range code like 0..100 it could be 'Percentage'. For an XREF class code such as 'Individual' it could provide extra information such as 'Participating persons'." />

		</entity>
		

		<entity name="BoolValue" extends="Value">
			<description>
				A boolean value.
			</description>
			<field name="Value" nillable="false" type="bool" />
		</entity>
		
		<entity name="CategoricalValue" extends="Value">
			<description>
				An XREF value.
			</description>
			<field name="Value" nillable="false" type="xref" xref_entity="Category" />
		</entity>

		<entity name="DateValue" extends="Value">
			<description>
				A date value.
			</description>
			<field name="Value" nillable="false" type="date" />
		</entity>
		
		<entity name="DateTimeValue" extends="Value">
			<description>
				A datetime value.
			</description>
			<field name="Value" nillable="false" type="datetime" />
		</entity>
		
		<entity name="DecimalValue" extends="Value">
			<description>
				A decimal value. (32 bit)
			</description>
			<field name="Value" nillable="false" type="decimal" />
			</entity>

		<entity name="EmailValue" extends="Value">
			<description>
				An email value. [Developer note: requires decorator="org.molgenis.omx.decorators.EmailValueDecorator"]
			</description>
			<field name="Value" nillable="false" type="email" />
		</entity>
		
		<entity name="HtmlValue" extends="Value">
			<description>
				An HTML value.
			</description>
			<field name="Value" nillable="false" type="text" />
		</entity>
		
		<entity name="HyperlinkValue" extends="Value">
			<description>
				A hyperlink value. [Developer note: requires decorator="org.molgenis.omx.decorators.HyperlinkValueDecorator"]
			</description>
			<field name="Value" nillable="false" type="hyperlink" />
		</entity>
		
		<entity name="IntValue" extends="Value">
			<description>
				An integer value. (16 bit)
			</description>
		<field name="Value" nillable="false" type="int" />
		</entity>
		
		<entity name="LongValue" extends="Value">
			<description>
				A long value. (32 bit)
			</description>
			<field name="Value" nillable="false" type="long" />
		</entity>

		<entity name="MrefValue" extends="Value">
			<description>
				An MREF value. This initially refers to the generic superclass Target. However, when Feature declares an MREF datatype, it refers to a specific implementation of Target as potential lookup values. This XREF value instances for 'measuring' this Feature must then point to this class, or a subclass thereof. For example: a Feature is created with ValueType org.molgenis.omx.xgap.Gene. (note that there is no XREF datatypeThe Values for this Feature (via DataItem, Observation, ObservedValue) must then refer to org.molgenis.omx.xgap.Gene or any subclass thereof. [Developer note: this requires a decorator to check!]
			</description>
			<field name="Value" nillable="false" type="mref" xref_entity="Target" />
		</entity>
		
		<entity name="StringValue" extends="Value">
			<description>
				A string value. (max 255 characters)
			</description>
			<field name="Value" nillable="false" type="string"  length="255" />
		</entity>
		
		<entity name="TextValue" extends="Value">
			<description>
				A text value. (no character limit) This is the most basic and broad flavour of Value; it can contain large pieces of 'untyped' data. TBD: Typically has no PermittedValue rules associated.
			</description>
			<field name="Value" nillable="false" type="text" />
		</entity>

		<entity name="XrefValue" extends="Value">
			<description>
				An XREF value. This initially refers to the generic superclass Target. However, when Feature declares an XREF datatype, it refers to a specific implementation of Target as potential lookup values. This XREF value instances for 'measuring' this Feature must then point to this class, or a subclass thereof. For example: a Feature is created with datatype XREFe.g. org.molgenis.omx.xgap.Gene) [Developer note: this requires a decorator to check!]
			</description>
			<field name="Value" nillable="false" type="xref" xref_entity="Target" />
		</entity>

	</module>
</molgenis>
